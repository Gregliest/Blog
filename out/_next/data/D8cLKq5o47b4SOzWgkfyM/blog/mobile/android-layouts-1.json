{
  "pageProps": {
    "post": {
      "title": "Layouts Part I: Android > iOS",
      "date": "2014-11-15T01:01:45.000Z",
      "summary": "A comparison of basic layouts in iOS and Android.",
      "tags": ["code", "android", "iOS", "mobile"],
      "thumbnail": "/static/images/linear-layout/android-initial.png",
      "series": { "name": "Android Layouts", "number": 1, "type": "Series", "_raw": {} },
      "body": {
        "raw": "\nIn this series of blog posts, I'm going to discuss the view layout systems in iOS and Android. I will show that basic tasks are easier in Android because the platform provides useful layout abstractions that encapsulate and hide much of the complexity around defining a view. Also, by providing readable xml layout files, Android allows developers to create organized, reusable, and flexible layouts. On the other hand, iOS's constraint system is too low level, and so developers can quickly find themselves mired in a web of constraints. The resulting views are difficult and tedious to change, and do not offer the same power and flexibility as Android layouts.\n\nThe Basic Layout\n\nLet’s build a simple view with a text field, an image, and a button, one after another. In Android, all I have to do is make a Linear Layout, insert the three items in the order I want them to appear, and voila!\n\n```css\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                             android:orientation=\"vertical\"\n                             android:layout_width=\"fill_parent\"\n                             android:layout_height=\"fill_parent\">\n\n<TextView\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Canyon Creek, CA\"/>\n\n<ImageView\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:src=\"@drawable/CanyonCreek\"/>\n\n<Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Button 1\"/>\n\n</LinearLayout>\n```\n\n![The Basic Android Layout](/static/images/linear-layout/android-initial.png)\n\nOn iOS, the basic view setup is also quite easy. I’m going to use Interface Builder whenever possible because it is Apple's preferred view construction tool and because I find the code constraint language to be obtuse and unreadable. To obtain the same view we built in Android, you simply drag the elements you want onto the screen. Here’s an example.\n\n![The Basic Layout](/static/images/ios/basic-lined-up-layout.png)\n\nNote that auto layout will automatically infer a set of constraints to define how the view should change on rotation or resize. One can build an app without ever touching constraints, which is handy for prototypes. However, in my experience, the resulting view usually has a few bugs. Also, auto layout does not afford pixel control over the spacing, widths, and heights. So, to make a more professional layout, I'm going to add constraints. I will not go into detail here; there are a number of existing tutorials on how to use Interface Builder.\n\n![The Basic Layout, with Constraints!](/static/images/ios/basic-layout-constraints.png)\n\nI had to add eight constraints to do what Android did for free, adding significant complexity and code bloat. As a view gets more complex and the number of constraints multiplies, this system quickly becomes unwieldy. It can be really difficult to determine how a view element's position is being defined when there are dozens of constraints, and other elements are being dynamically resized.\n\nAlso, with so many constraints floating around, there are numerous ways to constrain the view, and the developer is responsible for choosing the best one. For instance, to center each view, I chose the “Center X Alignment” constraint relative to the parent view. But, I could have defined the horizontal position of each view as a distance from the left margin, or I could have chained the Center X Alignments together, so that each view is center aligned with the one above it. I chose relative to parent because the simplest layouts use constraints that are defined relative to the parent view whenever possible. That way, constraints are not chained off of other elements in the view, and it is easier to add/remove views. Regardless of the choices you make, constraints require a fair amount of thought, and can be very time consuming to get right.\n\nIn contrast to the web of constraints in iOS, the readability of the Android xml layout file allows me to use simple attributes to build clean, easy to follow, and encapsulated view elements. For instance, I can use `fill_parent` on the width and height attributes of the LinearLayout to fill the screen, and set margins on the text view and button to fix some spacing issues. I also can set the source file and the scaling type for the image view. All of these attributes reside inside the xml tag, where the they are easy to find and understand.\n\n```css\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                             android:orientation=\"vertical\"\n                             android:layout_width=\"fill_parent\"\n                             android:layout_height=\"fill_parent\">\n\n<TextView\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"15dp\"\n        android:layout_marginBottom=\"15dp\"\n        android:gravity=\"center_horizontal\"\n        android:text=\"Canyon Creek, CA\"/>\n\n<ImageView\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:gravity=\"center_horizontal\"\n        android:scaleType=\"fitCenter\"\n        android:src=\"@drawable/CanyonCreek\"/>\n\n<Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"15dp\"\n        android:layout_gravity=\"center_horizontal\"\n        android:text=\"Button 1\"/>\n\n</LinearLayout>\n```\n\n![The Improved Android Layout](/static/images/linear-layout/android-improved.png)\n\nThe one quirk I will note about this view is the use of `gravity` vs. `layout_gravity`. `gravity` dictates the placement of the elements of a view inside its frame, while `layout_gravity` controls the placement of a view's frame within its parent. For instance, with a button, `gravity` affects the placement of the title text within the button, while `layout_gravity` affects the placement of the button in the parent linearLayout. So, `layout_gravity` centers the button.\n\n[Continue to Part II: Add/Remove/Collapse](../android-ios-layouts-part-ii-add-remove-delete)\n",
        "code": "var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,N=Object.prototype.hasOwnProperty;var g=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),y=(a,e)=>{for(var s in e)i(a,s,{get:e[s],enumerable:!0})},l=(a,e,s,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of m(e))!N.call(a,t)&&t!==s&&i(a,t,{get:()=>e[t],enumerable:!(o=p(e,t))||o.enumerable});return a};var k=(a,e,s)=>(s=a!=null?h(u(a)):{},l(e||!a||!a.__esModule?i(s,\"default\",{value:a,enumerable:!0}):s,a)),w=a=>l(i({},\"__esModule\",{value:!0}),a);var c=g((A,r)=>{r.exports=_jsx_runtime});var x={};y(x,{default:()=>b,frontmatter:()=>f});var n=k(c()),f={title:\"Layouts Part I: Android > iOS\",date:new Date(1416013305e3),summary:\"A comparison of basic layouts in iOS and Android.\",tags:[\"code\",\"android\",\"iOS\",\"mobile\"],thumbnail:\"/static/images/linear-layout/android-initial.png\",series:{name:\"Android Layouts\",number:1},type:\"Blog\"};function d(a){let e=Object.assign({p:\"p\",pre:\"pre\",code:\"code\",span:\"span\",div:\"div\",a:\"a\"},a.components),{Image:s}=e;return s||_(\"Image\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"In this series of blog posts, I'm going to discuss the view layout systems in iOS and Android. I will show that basic tasks are easier in Android because the platform provides useful layout abstractions that encapsulate and hide much of the complexity around defining a view. Also, by providing readable xml layout files, Android allows developers to create organized, reusable, and flexible layouts. On the other hand, iOS's constraint system is too low level, and so developers can quickly find themselves mired in a web of constraints. The resulting views are difficult and tedious to change, and do not offer the same power and flexibility as Android layouts.\"}),(0,n.jsx)(e.p,{children:\"The Basic Layout\"}),(0,n.jsx)(e.p,{children:\"Let\\u2019s build a simple view with a text field, an image, and a button, one after another. In Android, all I have to do is make a Linear Layout, insert the three items in the order I want them to appear, and voila!\"}),(0,n.jsx)(e.pre,{className:\"language-css\",children:(0,n.jsxs)(e.code,{className:\"language-css code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"<LinearLayout \",(0,n.jsx)(e.span,{className:\"token property\",children:\"xmlns\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"android=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"http://schemas.android.com/apk/res/android\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"                             \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"orientation=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"vertical\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"                             \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_width=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"fill_parent\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"                             \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_height=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"fill_parent\"'}),`>\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`<TextView\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_width=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"fill_parent\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_height=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"wrap_content\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"text=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"Canyon Creek, CA\"'}),`/>\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`<ImageView\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_width=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"fill_parent\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_height=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"wrap_content\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"src=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"@drawable/CanyonCreek\"'}),`/>\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`<Button\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_width=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"wrap_content\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_height=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"wrap_content\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"text=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"Button 1\"'}),`/>\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`</LinearLayout>\n`})]})}),(0,n.jsx)(e.div,{children:(0,n.jsx)(s,{alt:\"The Basic Android Layout\",src:\"/static/images/linear-layout/android-initial.png\",width:\"511\",height:\"970\"})}),(0,n.jsx)(e.p,{children:\"On iOS, the basic view setup is also quite easy. I\\u2019m going to use Interface Builder whenever possible because it is Apple's preferred view construction tool and because I find the code constraint language to be obtuse and unreadable. To obtain the same view we built in Android, you simply drag the elements you want onto the screen. Here\\u2019s an example.\"}),(0,n.jsx)(e.div,{children:(0,n.jsx)(s,{alt:\"The Basic Layout\",src:\"/static/images/ios/basic-lined-up-layout.png\",width:\"1383\",height:\"860\"})}),(0,n.jsx)(e.p,{children:\"Note that auto layout will automatically infer a set of constraints to define how the view should change on rotation or resize. One can build an app without ever touching constraints, which is handy for prototypes. However, in my experience, the resulting view usually has a few bugs. Also, auto layout does not afford pixel control over the spacing, widths, and heights. So, to make a more professional layout, I'm going to add constraints. I will not go into detail here; there are a number of existing tutorials on how to use Interface Builder.\"}),(0,n.jsx)(e.div,{children:(0,n.jsx)(s,{alt:\"The Basic Layout, with Constraints!\",src:\"/static/images/ios/basic-layout-constraints.png\",width:\"1238\",height:\"809\"})}),(0,n.jsx)(e.p,{children:\"I had to add eight constraints to do what Android did for free, adding significant complexity and code bloat. As a view gets more complex and the number of constraints multiplies, this system quickly becomes unwieldy. It can be really difficult to determine how a view element's position is being defined when there are dozens of constraints, and other elements are being dynamically resized.\"}),(0,n.jsx)(e.p,{children:\"Also, with so many constraints floating around, there are numerous ways to constrain the view, and the developer is responsible for choosing the best one. For instance, to center each view, I chose the \\u201CCenter X Alignment\\u201D constraint relative to the parent view. But, I could have defined the horizontal position of each view as a distance from the left margin, or I could have chained the Center X Alignments together, so that each view is center aligned with the one above it. I chose relative to parent because the simplest layouts use constraints that are defined relative to the parent view whenever possible. That way, constraints are not chained off of other elements in the view, and it is easier to add/remove views. Regardless of the choices you make, constraints require a fair amount of thought, and can be very time consuming to get right.\"}),(0,n.jsxs)(e.p,{children:[\"In contrast to the web of constraints in iOS, the readability of the Android xml layout file allows me to use simple attributes to build clean, easy to follow, and encapsulated view elements. For instance, I can use \",(0,n.jsx)(e.code,{children:\"fill_parent\"}),\" on the width and height attributes of the LinearLayout to fill the screen, and set margins on the text view and button to fix some spacing issues. I also can set the source file and the scaling type for the image view. All of these attributes reside inside the xml tag, where the they are easy to find and understand.\"]}),(0,n.jsx)(e.pre,{className:\"language-css\",children:(0,n.jsxs)(e.code,{className:\"language-css code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"<LinearLayout \",(0,n.jsx)(e.span,{className:\"token property\",children:\"xmlns\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"android=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"http://schemas.android.com/apk/res/android\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"                             \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"orientation=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"vertical\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"                             \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_width=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"fill_parent\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"                             \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_height=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"fill_parent\"'}),`>\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`<TextView\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_width=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"fill_parent\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_height=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"wrap_content\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_marginTop=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"15dp\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_marginBottom=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"15dp\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"gravity=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"center_horizontal\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"text=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"Canyon Creek, CA\"'}),`/>\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`<ImageView\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_width=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"fill_parent\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_height=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"wrap_content\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"gravity=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"center_horizontal\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"scaleType=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"fitCenter\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"src=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"@drawable/CanyonCreek\"'}),`/>\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`<Button\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_width=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"wrap_content\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_height=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"wrap_content\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_marginTop=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"15dp\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"layout_gravity=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"center_horizontal\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token property\",children:\"android\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\"text=\",(0,n.jsx)(e.span,{className:\"token string\",children:'\"Button 1\"'}),`/>\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsx)(e.span,{className:\"code-line\",children:`</LinearLayout>\n`})]})}),(0,n.jsx)(e.div,{children:(0,n.jsx)(s,{alt:\"The Improved Android Layout\",src:\"/static/images/linear-layout/android-improved.png\",width:\"516\",height:\"971\"})}),(0,n.jsxs)(e.p,{children:[\"The one quirk I will note about this view is the use of \",(0,n.jsx)(e.code,{children:\"gravity\"}),\" vs. \",(0,n.jsx)(e.code,{children:\"layout_gravity\"}),\". \",(0,n.jsx)(e.code,{children:\"gravity\"}),\" dictates the placement of the elements of a view inside its frame, while \",(0,n.jsx)(e.code,{children:\"layout_gravity\"}),\" controls the placement of a view's frame within its parent. For instance, with a button, \",(0,n.jsx)(e.code,{children:\"gravity\"}),\" affects the placement of the title text within the button, while \",(0,n.jsx)(e.code,{children:\"layout_gravity\"}),\" affects the placement of the button in the parent linearLayout. So, \",(0,n.jsx)(e.code,{children:\"layout_gravity\"}),\" centers the button.\"]}),(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"../android-ios-layouts-part-ii-add-remove-delete\",children:\"Continue to Part II: Add/Remove/Collapse\"})})]})}function v(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,Object.assign({},a,{children:(0,n.jsx)(d,a)})):d(a)}var b=v;function _(a,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+a+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return w(x);})();\n;return Component;"
      },
      "_id": "blog/mobile/android-layouts-1.mdx",
      "_raw": {
        "sourceFilePath": "blog/mobile/android-layouts-1.mdx",
        "sourceFileName": "android-layouts-1.mdx",
        "sourceFileDir": "blog/mobile",
        "contentType": "mdx",
        "flattenedPath": "blog/mobile/android-layouts-1"
      },
      "type": "Blog",
      "readingTime": { "text": "4 min read", "minutes": 3.835, "time": 230100, "words": 767 },
      "slug": "mobile/android-layouts-1",
      "toc": []
    },
    "authorDetails": [
      {
        "name": "Gregory Lee",
        "avatar": "/static/images/avatar.png",
        "occupation": "Professor of Atmospheric Science",
        "company": "Stanford University",
        "email": "address@yoursite.com",
        "twitter": "https://twitter.com/Twitter",
        "linkedin": "https://www.linkedin.com",
        "github": "https://github.com",
        "type": "Authors",
        "readingTime": { "text": "1 min read", "minutes": 0.015, "time": 900, "words": 3 },
        "slug": "default",
        "toc": []
      }
    ],
    "prev": {
      "title": "Milky Way Boats",
      "date": "2014-10-26T06:29:04.000Z",
      "tags": ["photography"],
      "thumbnail": "/static/images/photography/milky-way-boats.jpg",
      "image": "/static/images/photography/milky-way-boats.jpg",
      "authors": ["gregliest"],
      "type": "Blog",
      "readingTime": { "text": "1 min read", "minutes": 0.025, "time": 1500, "words": 5 },
      "slug": "photography/milky-way-boats",
      "toc": [{ "value": "Tomales Bay, CA.", "url": "#tomales-bay-ca", "depth": 1 }]
    },
    "next": {
      "title": "Layouts Part II: Add/Remove/Collapse",
      "date": "2014-11-16T01:04:45.000Z",
      "summary": "A comparison of the ease of adding, removing, and collapsing views in an Android Linear Layout vs. an iOS Interface Builder view.",
      "tags": ["code", "android", "iOS", "mobile"],
      "thumbnail": "/linear-layout/android-visible.png",
      "series": { "name": "Android Layouts", "number": 2, "type": "Series", "_raw": {} },
      "type": "Blog",
      "readingTime": { "text": "6 min read", "minutes": 5.525, "time": 331500, "words": 1105 },
      "slug": "mobile/android-layouts-2",
      "toc": [{ "value": "Visibility", "url": "#visibility", "depth": 1 }]
    }
  },
  "__N_SSG": true
}
